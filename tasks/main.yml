---
- name: Install and upgrade phpMyAdmin
  block:

    - name: Debug the hostvars variable names that start with phpmyadmin_
      ansible.builtin.debug:
        var: phpmyadminvarnames
        verbosity: "{% if ansible_check_mode | bool %}3{% else %}4{% endif %}"

    - name: Debug the hostvars variable names that start with phpmyadmin_
      ansible.builtin.debug:
        var: phpmyadminhostvars
        verbosity: "{% if ansible_check_mode | bool %}3{% else %}4{% endif %}"

    - name: Check phpmyadmin_ variables using meta/argument_specs.yml
      ansible.builtin.validate_argument_spec:
        argument_spec: "{{ (lookup('ansible.builtin.file', 'meta/argument_specs.yml') | from_yaml )['argument_specs']['main']['options'] }}"
        provided_arguments: "{{ phpmyadminhostvars }}"

    # TODO Additional checks on variable values could be added
    - name: Check required variables
      ansible.builtin.assert:
        that:
          - ( phpmyadmin_version == "latest" ) or ( phpmyadmin_version is regex('^[0-9][.][0-9][.][0-9]{1,2}[.]{0,1}[0-9]{0,2}$') )
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"

    - name: Fail if the phpMyAdmin user account doesn't exist
      ansible.builtin.getent:
        database: passwd
        key: "{{ phpmyadmin_user }}"
        fail_key: true

    - name: Include apt role local fact tasks
      ansible.builtin.include_role:
        name: apt
        tasks_from: local_facts.yml
      when: >-
        ( ansible_local.bash.path is not defined ) or
        ( ansible_local.dpkg.arch is not defined ) or
        ( ansible_local.dpkg.installed is not defined ) or
        ( ansible_local.gpg.version is not defined )

    - name: Required packages present
      ansible.builtin.apt:
        pkg: "{{ phpmyadmin_pkgs }}"
        state: present
      when:
        - phpmyadmin_pkgs is defined
        - phpmyadmin_pkgs != []
        - phpmyadmin_pkgs | difference(ansible_local.dpkg.installed) != []

    - name: Find the latest version of phpMyAdmin
      block:

        - name: Use a HEAD request to get the latest redirect URL
          ansible.builtin.uri:
            url: https://github.com/phpmyadmin/phpmyadmin/releases/latest
            method: HEAD
            status_code: 302
            follow_redirects: none
          check_mode: false
          changed_when: false
          register: phpmyadmin_latest_headers

        - name: Set a fact for the latest version of phpMyAdmin
          ansible.builtin.set_fact:
            phpmyadmin_proposed: "{{ phpmyadmin_latest_headers.location | urlsplit('path') | basename | regex_replace('^RELEASE_') | regex_replace('_', '.') | string }}"

      when: phpmyadmin_version == "latest"

    - name: Set a fact for the proposed version of phpMyAdmin when not using the latest version
      ansible.builtin.set_fact:
        phpmyadmin_proposed: "{{ phpmyadmin_version | string }}"
      when: phpmyadmin_proposed is not defined

    - name: Check the version of PHP when it is not defined
      block:

        - name: Check the default version of PHP available via the command line
          ansible.builtin.shell: php --version
          args:
            executable: "{{ ansible_local.bash.path }}"
          environment: "{{ phpmyadmin_env }}"
          check_mode: false
          changed_when: false
          become: true
          become_user: "{{ phpmyadmin_user }}"
          register: phpmyadmin_php_version_check

        - name: Set a fact for the version of PHP available via the command line
          ansible.builtin.set_fact:
            phpmyadmin_php_version: "{{ ( phpmyadmin_php_version_check.stdout_lines[0] ).split(' ')[1] | string }}"

      when: phpmyadmin_php_version is not defined

    - name: Check that if we are instaling or upgrading to phpMyAdmin 5.2.0 we have php 7.2 or newer
      ansible.builtin.assert:
        that:
          - phpmyadmin_php_version | string is version('7.2', '>=')
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
      when: phpmyadmin_proposed | string is version('5.2.0', '>=')

    - name: Check for package.json
      ansible.builtin.stat:
        path: "{{ phpmyadmin_docroot }}/package.json"
      register: phpmyadmin_package_json

    - name: Check phpMyAdmin version
      block:

        - name: Check phpMyAdmin version
          ansible.builtin.include_tasks: version.yml

        - name: Debug phpMyAdmin version installed
          ansible.builtin.debug:
            var: phpmyadmin_installed

        - name: Debug phpMyAdmin version proposed
          ansible.builtin.debug:
            var: phpmyadmin_proposed

        - name: Don't allow downgrades of phpMyAdmin
          ansible.builtin.assert:
            that:
              - phpmyadmin_proposed is version(phpmyadmin_installed, '>=')
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"

      when: phpmyadmin_package_json.stat.exists | bool

    - name: Include phpMyAdmin install tasks
      ansible.builtin.include_tasks: install.yml
      when: >-
        ( not phpmyadmin_package_json.stat.exists | bool ) or
        ( ( phpmyadmin_package_json is defined ) and
        ( phpmyadmin_package_json.stat.exists | bool ) and
        ( phpmyadmin_installed is defined ) and
        ( phpmyadmin_installed is version(phpmyadmin_proposed, '<') ) )

    - name: Include phpMyAdmin configure tasks
      ansible.builtin.include_tasks: config.yml

    - name: Check phpMyAdmin version
      ansible.builtin.include_tasks: version.yml

    - name: Print the phpMyAdmin version that is installed
      ansible.builtin.debug:
        var: phpmyadmin_installed

  when: phpmyadmin | bool
  tags:
    - phpmyadmin
...
