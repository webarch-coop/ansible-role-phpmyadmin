---
- name: Download and install phpMyAdmin
  block:

    - name: .ansible directory present
      file:
        path: "{{ phpmyadmin_home }}/.ansible"
        state: directory
        owner: "{{ phpmyadmin_user }}"
        group: "{{ phpmyadmin_user }}"
        mode: 0700

    - name: GitHub GPG key present
      copy:
        src: files/github.asc
        dest: /root/github.asc

    - name: GitLab GPG public key imported
      command: gpg --import /root/github.asc
      register: phpmyadmin_gpg_import
      changed_when: '"not changed" not in phpmyadmin_gpg_import.stderr'
      check_mode: false

    - name: Convert the phpMyAdmin version string to a git tag
      set_fact:
        phpmyadmin_git_tag: "{{ phpmyadmin_version | regex_replace('^', 'RELEASE_') | regex_replace('[.]', '_')"

    - name: Debug git tag
      debug:
        msg: "Proposed git tag: {{ phpmyadmin_git_tag }}"

    # https://docs.phpmyadmin.net/en/latest/setup.html#installing-from-git
    - name: phpMyAdmin repo present
      git:
        repo: https://github.com/phpmyadmin/phpmyadmin.git
        dest: "{{ phpmyadmin_docroot }}"
        version: "{{ phpmyadmin_git_tag }}"
        depth: 1
        clone: true
        update: true
        force: true
        verify_commit: true

    - name: Chown the files
      file:
        path: "{{ phpmyadmin_docroot }}"
        recurse: true
        owner: "{{ phpmyadmin_user }}"
        group: "{{ phpmyadmin_user }}"

    - name: composer update for phpMyAdmin
      command: composer update --no-dev
      args:
        chdir: "{{ phpmyadmin_docroot }}"
      become: true
      become_user: "{{ phpmyadmin_user }}"

    - name: composer packages for two factor authentication present
      command: composer require pragmarx/google2fa-qrcode
      args:
        chdir: "{{ phpmyadmin_docroot }}"
      become: true
      become_user: "{{ phpmyadmin_user }}"

    - name: yarn install for phpMyAdmin
      yarn:
        path: "{{ phpmyadmin_docroot }}"
        production: true
        state: latest
      become: true
      become_user: "{{ phpmyadmin_user }}"

    - name: Check if the database contains tables
      command: "mysql --user={{ phpmyadmin_dbuser | quote}} --password={{ phpmyadmin_dbpass | quote }} {{ phpmyadmin_dbname }} --skip-column-names --batch -e 'SHOW TABLES'"
      register: phpmyadmin_dbtable_check

    - name: Database tables present
      mysql_db:
        name: "{{ phpmyadmin_dbname }}"
        state: import
        target: "{{ phpmyadmin_docroot }}/sql/create_tables.sql"
      when: ( phpmyadmin_dbtable_check is defined ) and ( phpmyadmin_dbtable_check.stdout | length <= 0 )

    # https://docs.phpmyadmin.net/en/latest/config.html#web-dirs
    - name: Get a list of sub-directories
      shell: find . -maxdepth 1 -type d | grep -v ^\.$ | sed 's/\.\///' | grep -v ^js$ | grep -v ^themes$ | grep -v ^vendor$
      args:
        chdir: "{{ phpmyadmin_docroot }}"
      become: true
      become_user: "{{ phpmyadmin_user }}"
      check_mode: false
      changed_when: false
      register: phpmyadmin_subdirs

    - name: .htaccess in place
      copy:
        src: files/htaccess.root
        dest: "{{ phpmyadmin_docroot }}/.htaccess"

    - name: .htaccess files in place to deny direct access to sub-directories
      copy:
        src: files/htaccess.deny
        dest: "{{ phpmyadmin_docroot }}/{{ dir }}/.htaccess"
      loop: "{{ phpmyadmin_subdirs.stdout_lines }}"
      loop_control:
        loop_var: dir

    - name: robots.txt in place
      copy:
        src: robots.txt
        dest: "{{ phpmyadmin_html }}/robots.txt"
        owner: "{{ phpmyadmin_user }}"
        group: "{{ phpmyadmin_user }}"
        mode: "0644"

    - name: Generate blowfish secret for cookies
      shell: "pwgen -sn 32 1 > {{ phpmyadmin_private }}/.blowfish.secret && chmod 400 {{ phpmyadmin_private }}/.blowfish.secret"
      args:
        creates: "{{ phpmyadmin_private }}/.blowfish.secret"
      become: true
      become_user: "{{ phpmyadmin_user }}"
      check_mode: false

    - name: Set a variable for the base64 encoded .blowfish.secret value
      slurp:
        src: "{{ phpmyadmin_private }}/.blowfish.secret"
      register: phpmyadmin_blowfish_b64encoded

    - name: Set a fact for the blowfish secret
      set_fact:
        phpmyadmin_blowfish_secret: "{{ phpmyadmin_blowfish_b64encoded['content'] | b64decode | trim }}"

    - name: Check for config.inc.php
      stat:
        path: "{{ phpmyadmin_html }}/config.inc.php"
      check_mode: false
      register: phpmyadmin_config_check

    - name: Generate the config.inc.php file
      template:
        src: templates/config.inc.php.j2
        dest: "{{ phpmyadmin_html }}/config.inc.php"

  tags:
    - phpmyadmin
...
